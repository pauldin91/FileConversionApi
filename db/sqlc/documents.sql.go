// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const batchCreateDocuments = `-- name: BatchCreateDocuments :exec
INSERT INTO documents (entry_id, filename)
VALUES (
  unnest($1::uuid[]),
  unnest($2::text[])
)
`

type BatchCreateDocumentsParams struct {
	Column1 []uuid.UUID `json:"column_1"`
	Column2 []string    `json:"column_2"`
}

func (q *Queries) BatchCreateDocuments(ctx context.Context, arg BatchCreateDocumentsParams) error {
	_, err := q.db.Exec(ctx, batchCreateDocuments, arg.Column1, arg.Column2)
	return err
}

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
  entry_id,
  filename
) VALUES (
  $1, $2
) RETURNING id, entry_id, filename, page_count
`

type CreateDocumentParams struct {
	EntryID  uuid.UUID `json:"entry_id"`
	Filename string    `json:"filename"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, createDocument, arg.EntryID, arg.Filename)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.Filename,
		&i.PageCount,
	)
	return i, err
}

const getDocument = `-- name: GetDocument :one
SELECT id, entry_id, filename, page_count FROM documents
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDocument(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.Filename,
		&i.PageCount,
	)
	return i, err
}

const getDocumentsByEntryId = `-- name: GetDocumentsByEntryId :many
SELECT id, entry_id, filename, page_count FROM documents
WHERE entry_id = $1 
LIMIT $2
`

type GetDocumentsByEntryIdParams struct {
	EntryID uuid.UUID `json:"entry_id"`
	Limit   int32     `json:"limit"`
}

func (q *Queries) GetDocumentsByEntryId(ctx context.Context, arg GetDocumentsByEntryIdParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsByEntryId, arg.EntryID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.Filename,
			&i.PageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsByFilename = `-- name: GetDocumentsByFilename :many
SELECT id, entry_id, filename, page_count FROM documents
WHERE filename = $1
`

func (q *Queries) GetDocumentsByFilename(ctx context.Context, filename string) ([]Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsByFilename, filename)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.Filename,
			&i.PageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsByUserId = `-- name: GetDocumentsByUserId :many
SELECT filename,entry_id,entries.id,entries.user_id
FROM documents
LEFT JOIN entries 
ON documents.entry_id = entries.id
WHERE user_id = $1
`

type GetDocumentsByUserIdRow struct {
	Filename string      `json:"filename"`
	EntryID  uuid.UUID   `json:"entry_id"`
	ID       pgtype.UUID `json:"id"`
	UserID   pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetDocumentsByUserId(ctx context.Context, userID uuid.UUID) ([]GetDocumentsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getDocumentsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDocumentsByUserIdRow{}
	for rows.Next() {
		var i GetDocumentsByUserIdRow
		if err := rows.Scan(
			&i.Filename,
			&i.EntryID,
			&i.ID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsByUsername = `-- name: GetDocumentsByUsername :many
SELECT filename,entry_id,entries.id,entries.user_id,users.id,users.username
FROM documents
LEFT JOIN entries 
ON documents.entry_id = entries.id
LEFT JOIN users 
ON entries.user_id = users.id
WHERE username = $1
`

type GetDocumentsByUsernameRow struct {
	Filename string      `json:"filename"`
	EntryID  uuid.UUID   `json:"entry_id"`
	ID       pgtype.UUID `json:"id"`
	UserID   pgtype.UUID `json:"user_id"`
	ID_2     pgtype.UUID `json:"id_2"`
	Username pgtype.Text `json:"username"`
}

func (q *Queries) GetDocumentsByUsername(ctx context.Context, username string) ([]GetDocumentsByUsernameRow, error) {
	rows, err := q.db.Query(ctx, getDocumentsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDocumentsByUsernameRow{}
	for rows.Next() {
		var i GetDocumentsByUsernameRow
		if err := rows.Scan(
			&i.Filename,
			&i.EntryID,
			&i.ID,
			&i.UserID,
			&i.ID_2,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, entry_id, filename, page_count FROM documents
LIMIT $1
OFFSET $2
`

type ListDocumentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDocuments(ctx context.Context, arg ListDocumentsParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, listDocuments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.Filename,
			&i.PageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePageCount = `-- name: UpdatePageCount :one
UPDATE documents
SET page_count = $1
WHERE id = $2
RETURNING id, entry_id, filename, page_count
`

type UpdatePageCountParams struct {
	PageCount int32     `json:"page_count"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePageCount(ctx context.Context, arg UpdatePageCountParams) (Document, error) {
	row := q.db.QueryRow(ctx, updatePageCount, arg.PageCount, arg.ID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.Filename,
		&i.PageCount,
	)
	return i, err
}
