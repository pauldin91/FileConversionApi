// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
  entry_id,
  filename
) VALUES (
  $1, $2
) RETURNING id, entry_id, filename
`

type CreateDocumentParams struct {
	EntryID  uuid.UUID `json:"entry_id"`
	Filename string    `json:"filename"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, createDocument, arg.EntryID, arg.Filename)
	var i Document
	err := row.Scan(&i.ID, &i.EntryID, &i.Filename)
	return i, err
}

const getDocument = `-- name: GetDocument :one
SELECT id, entry_id, filename FROM documents
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDocument(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, getDocument, id)
	var i Document
	err := row.Scan(&i.ID, &i.EntryID, &i.Filename)
	return i, err
}

const getDocumentByFilename = `-- name: GetDocumentByFilename :many
SELECT id, entry_id, filename FROM documents
WHERE filename = $1
`

func (q *Queries) GetDocumentByFilename(ctx context.Context, filename string) ([]Document, error) {
	rows, err := q.db.Query(ctx, getDocumentByFilename, filename)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(&i.ID, &i.EntryID, &i.Filename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentByUsername = `-- name: GetDocumentByUsername :many
SELECT filename,entry_id,entries.id,entries.user_username 
FROM documents
LEFT JOIN entries 
ON documents.entry_id = entries.id
WHERE user_username = $1
`

type GetDocumentByUsernameRow struct {
	Filename     string      `json:"filename"`
	EntryID      uuid.UUID   `json:"entry_id"`
	ID           pgtype.UUID `json:"id"`
	UserUsername pgtype.Text `json:"user_username"`
}

func (q *Queries) GetDocumentByUsername(ctx context.Context, userUsername string) ([]GetDocumentByUsernameRow, error) {
	rows, err := q.db.Query(ctx, getDocumentByUsername, userUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDocumentByUsernameRow{}
	for rows.Next() {
		var i GetDocumentByUsernameRow
		if err := rows.Scan(
			&i.Filename,
			&i.EntryID,
			&i.ID,
			&i.UserUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, entry_id, filename FROM documents
LIMIT $1
OFFSET $2
`

type ListDocumentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDocuments(ctx context.Context, arg ListDocumentsParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, listDocuments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(&i.ID, &i.EntryID, &i.Filename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
