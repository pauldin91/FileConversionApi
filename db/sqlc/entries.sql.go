// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  user_username
) VALUES (
  $1
) RETURNING id, user_username, created_at
`

func (q *Queries) CreateEntry(ctx context.Context, userUsername string) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntry, userUsername)
	var i Entry
	err := row.Scan(&i.ID, &i.UserUsername, &i.CreatedAt)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, user_username, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id uuid.UUID) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntry, id)
	var i Entry
	err := row.Scan(&i.ID, &i.UserUsername, &i.CreatedAt)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, user_username, created_at FROM entries
WHERE user_username = $1
LIMIT $2
OFFSET $3
`

type ListEntriesParams struct {
	UserUsername string `json:"user_username"`
	Limit        int32  `json:"limit"`
	Offset       int32  `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, listEntries, arg.UserUsername, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(&i.ID, &i.UserUsername, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
