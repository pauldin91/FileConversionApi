// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  user_id,
  operation
) VALUES (
  $1, $2
) RETURNING id, user_id, created_at, status, operation, max_retries, time_elapsed
`

type CreateEntryParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Operation string    `json:"operation"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntry, arg.UserID, arg.Operation)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Status,
		&i.Operation,
		&i.MaxRetries,
		&i.TimeElapsed,
	)
	return i, err
}

const createEntryWithId = `-- name: CreateEntryWithId :one
INSERT INTO entries (
  id,
  user_id,
  operation
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, created_at, status, operation, max_retries, time_elapsed
`

type CreateEntryWithIdParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Operation string    `json:"operation"`
}

func (q *Queries) CreateEntryWithId(ctx context.Context, arg CreateEntryWithIdParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntryWithId, arg.ID, arg.UserID, arg.Operation)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Status,
		&i.Operation,
		&i.MaxRetries,
		&i.TimeElapsed,
	)
	return i, err
}

const getEntriesByStatus = `-- name: GetEntriesByStatus :many
SELECT id, user_id, created_at, status, operation, max_retries, time_elapsed FROM entries 
WHERE status=$1
LIMIT $2
`

type GetEntriesByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) GetEntriesByStatus(ctx context.Context, arg GetEntriesByStatusParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, getEntriesByStatus, arg.Status, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Status,
			&i.Operation,
			&i.MaxRetries,
			&i.TimeElapsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntriesByUser = `-- name: GetEntriesByUser :many
SELECT id, user_id, created_at, status, operation, max_retries, time_elapsed FROM entries
WHERE user_id = $1
`

func (q *Queries) GetEntriesByUser(ctx context.Context, userID uuid.UUID) ([]Entry, error) {
	rows, err := q.db.Query(ctx, getEntriesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Status,
			&i.Operation,
			&i.MaxRetries,
			&i.TimeElapsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntry = `-- name: GetEntry :one
SELECT id, user_id, created_at, status, operation, max_retries, time_elapsed FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id uuid.UUID) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Status,
		&i.Operation,
		&i.MaxRetries,
		&i.TimeElapsed,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, user_id, created_at, status, operation, max_retries, time_elapsed FROM entries
WHERE user_id = $1
LIMIT $2
OFFSET $3
`

type ListEntriesParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, listEntries, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Status,
			&i.Operation,
			&i.MaxRetries,
			&i.TimeElapsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProcessed = `-- name: UpdateProcessed :one
UPDATE entries
SET status = $1, time_elapsed = $2
WHERE id = $3
RETURNING id, user_id, created_at, status, operation, max_retries, time_elapsed
`

type UpdateProcessedParams struct {
	Status      string    `json:"status"`
	TimeElapsed float64   `json:"time_elapsed"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateProcessed(ctx context.Context, arg UpdateProcessedParams) (Entry, error) {
	row := q.db.QueryRow(ctx, updateProcessed, arg.Status, arg.TimeElapsed, arg.ID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Status,
		&i.Operation,
		&i.MaxRetries,
		&i.TimeElapsed,
	)
	return i, err
}

const updateRetries = `-- name: UpdateRetries :one
UPDATE entries
SET max_retries = $1
WHERE id = $2
RETURNING id, user_id, created_at, status, operation, max_retries, time_elapsed
`

type UpdateRetriesParams struct {
	MaxRetries int32     `json:"max_retries"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdateRetries(ctx context.Context, arg UpdateRetriesParams) (Entry, error) {
	row := q.db.QueryRow(ctx, updateRetries, arg.MaxRetries, arg.ID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Status,
		&i.Operation,
		&i.MaxRetries,
		&i.TimeElapsed,
	)
	return i, err
}
